{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Get started with FManC","text":"<p>Please note that neither the lib nor the documentation are finished.</p>"},{"location":"#requirements","title":"Requirements","text":"<ol> <li>GCC is required to build the library since the lib uses some of the attributes provided by GCC.</li> <li>GNU Make (again, to build the library).</li> </ol> <p>UNIFINISHED</p>"},{"location":"api_doc/filesystem_api/","title":"Filesystem API reference","text":"<p>FManC filesystem API provides an easy and portable way to operate on filesystem : </p> <ul> <li>POSIX style file type checking (1)</li> <li>Directory management</li> </ul> <p>(1) Some functions of this API are small wrappers of C++ filesystem API, hence their behaviour on any operating system or platform is the same as their C++ equivalent (except when explicitely stated). There is a link to cppreference in the description of such functions.</p>"},{"location":"api_doc/filesystem_api/file_type_checking/","title":"File type checking","text":""},{"location":"api_doc/filesystem_api/file_type_checking/#functions","title":"Functions","text":""},{"location":"api_doc/filesystem_api/file_type_checking/#fmc_direxists","title":"FMC_dirExists","text":"Function signatureExample 1Example 2 <pre><code>int FMC_dirExists(const char* restrict path); </code></pre> <pre><code>if (FMC_dirExists(\"test/main.c\"))\n{\nFILE *src_file = fopen(\"test/main.c\", \"rb\");\n// do something with it\n}\nelse\n{\n}\n// ...\n</code></pre> <pre><code>char directory[128] = \"C:\\\\Users\\\\YourFolder\\\\\";\nif (FMC_dirExists(directory))\n{\nprintf(\"Entering directory %s\\n\", directory);\n// ...\n}\nelse\n// ...\n</code></pre> <p>Parameters</p> <p><code>path</code> : the path whose you want to check the existence. The file can either be a regular file, a directory, or any valid device, socket... Multi-byte caracters are not supported.</p> <p>Return value </p> <p>The function returns non-zero value if the path effectively exists, 0 otherwise.</p> <p>Description</p> <p>You can use this function on any POSIX-compliant system or Windows. The Windows version uses the Win32 filesystem API and thus does not require any particular compiler. The Unix version uses the usual stat function.</p>"},{"location":"api_doc/filesystem_api/file_type_checking/#fmc_isdir","title":"FMC_isDir","text":"Function signatureExample of use <pre><code>int FMC_isDir(const char* restrict path);\n</code></pre> <pre><code>if(FMC_isDir(\"/home/you/random_folder/\") == 0) {\nDIR *your_dir;\nstruct dirent *entries;\nyour_dir = opendir(\"/home/you/random_folder/\");\nwhile((entries = readdir(your_dir)) != NULL)\n{\nprintf(\"%s\\n\", entries-&gt;d_name);\n}\nclosedir(your_dir);\n// ... (1)!\n}\n</code></pre> <ol> <li>This example is not that usefull by itself since you could have checked <code>your_dir != NULL</code> after it has been opened, but the whole interest is the fact that it's a portable and simple way to check for a dir.</li> </ol> <p>Parameters</p> <p><code>path</code> : the path whose you want to check if it's a directory. Multi-byte caracters are not supported.</p> <p>Return value</p> <p>The function returns non-zero value if the path is a directory, 0 otherwise.</p> <p>Description</p> <p>You can use this function on any POSIX-compliant system or Windows. The Windows version uses the Win32 filesystem API and thus does not require any particular compiler. The Unix version uses the usual stat function.</p>"},{"location":"api_doc/filesystem_api/file_type_checking/#fmc_isregfile","title":"FMC_isRegFile","text":"Function signatureExample of use <pre><code>int FMC_isRegFile(const char* restrict path);\n</code></pre> <pre><code>// To be done\n</code></pre> <p>Parameters</p> <p><code>path</code> : the path whose you want to check if it's a regular file. Multi-byte characters are not supported.</p> <p>Return value</p> <p>The function returns non-zero value if the path is a regular file, 0 otherwise.</p> <p>Description</p> <p>You can use this function on any POSIX-compliant system or Windows. The Windows version uses the Win32 filesystem API and thus does not require any particular compiler. The Unix version uses the usual stat function.</p>"},{"location":"api_doc/filesystem_api/file_type_checking/#fmc_ischardevice","title":"FMC_isCharDevice","text":"<p>To be done</p>"},{"location":"api_doc/filesystem_api/file_type_checking/#fmc_issocket","title":"FMC_isSocket","text":""},{"location":"api_doc/filesystem_api/file_type_checking/#fmc_issymlink","title":"FMC_isSymLink","text":"Function signatureExample of use <pre><code>int FMC_isSymLink(const char *path);\n</code></pre> <pre><code>// To be done\n</code></pre>"},{"location":"api_doc/filesystem_api/file_type_checking/#fmc_isblock","title":"FMC_isBlock","text":"Function signatureExample of use <pre><code>int FMC_isBlock(const char* path);\n</code></pre> <pre><code>// To be done\n</code></pre>"},{"location":"data_structure_index/","title":"Data structures","text":"<p>FManC implements various \"interfaces\" in its API. All of them serve a particular purpose.</p>"}]}